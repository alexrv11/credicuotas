# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the main branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Set up secrets in your workspace: GKE_PROJECT with the name of the project and GKE_SA_KEY with the Base64 encoded JSON service account key (https://github.com/GoogleCloudPlatform/github-actions/tree/docs/service-account-key/setup-gcloud#inputs).
#
# 3. Change the values for the GKE_ZONE, GKE_CLUSTER, IMAGE, and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke

name: Build and Deploy

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT_ID }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
  GAR_LOCATION: ${{ secrets.GKE_ZONE }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  DEPLOYMENT_NAME: web-client-admin-credicuotas
  POSTGRES_URL: ${{ secrets.POSTGRES_URL }}
  WEB_APP: web-client
  API_APP: api-server
  ENV: prod
  IMAGE: admin
  API_IMAGE: api
  TAG: "1.0.${{ github.run_number }}"

jobs:
  web-admin:
    name: web admin
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication
    - run: |-
        gcloud --quiet auth configure-docker

    # Build the Docker image
    - name: Build-Admin
      run: |-
        docker build \
          --tag "gcr.io/$PROJECT_ID/$WEB_APP/$IMAGE:$TAG" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          ./client/admin

    # Push the Docker image to Google Container Registry
    - name: Publish-Admin
      run: |-
        docker push "gcr.io/$PROJECT_ID/$WEB_APP/$IMAGE:$TAG"
  api-server:
    name: api server
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication
    - run: |-
        gcloud --quiet auth configure-docker
    # Setup golang
    - uses: actions/setup-go@v2
      with:
        go-version: '1.15.14' # The Go version to download (if necessary) and use.
    - run: go version
    - run: cd server/ && go mod download
    - run: go generate server/...
    - run: cd server/ && go build -v -o gocredit ./main/main.go

    #Pre build
    - name: DB migrate
      run: |-
        ./server/gocredit migrate
        

    # Build the Docker image
    - name: Build
      run: |-
        docker build \
          --tag "gcr.io/$PROJECT_ID/$API_APP/$API_IMAGE:$TAG" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          ./server

    # Push the Docker image to Google Container Registry
    - name: Publish
      run: |-
        docker push "gcr.io/$PROJECT_ID/$API_APP/$API_IMAGE:$TAG"

