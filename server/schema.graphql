# GraphQL schema example
#
# https://gqlgen.com/getting-started/


scalar Map

type Credential {
  accessToken: String!
}

directive @hasRole(role: Role!) on FIELD_DEFINITION

enum Role {
  ADMIN
  CREDIT_ASSISTANT
  MANAGER
  USER_CLIENT
}

enum IncomeType {
  OWN_BUSINESS
  ONW_EMPLOYEE
  PRIVATE_COMPANY_EMPLOYEE
  PUBLIC_EMPLOYEE
}

directive @authenticated on | OBJECT | FIELD_DEFINITION | ENUM

enum OnboardingStatus {
  COMPLETE
  PENDING_PERSONAL_DATA
  PENDING_CI_FRONT
  PENDING_CI_BACK
  PENDING_PHONE_NUMBER
}


enum RoleAction {
  READ
  CREATE
  UPDATE
  DELETE
}

type Query  {
  getUser: User! @authenticated
  onboarding: OnboardingStatus! @authenticated
  getLoans: [Loan!]! @authenticated
  getLoanOrders: [Loan]! @authenticated
  getClients: [User]! @authenticated
}

type Mutation {
  sendCodeByEmail(email: String!): Boolean!
  signInWithCode(email: String!, code: String!): Credential!
  login(email: String!, password: String!): Credential!
  createUser(email: String!, password: String!, name: String!, role: Role!): Boolean! @authenticated @hasRole(role: ADMIN)
  saveUserInfo(name: String!, identifier: String!): Boolean! @authenticated
  sendCodeByPhone(phone: String!): Boolean! @authenticated
  savePhoneNumber(phone: String!, code: String!): Boolean! @authenticated
  saveLoan(amount: Int!, totalInstallments: Int!, incomeType: IncomeType!): Boolean! @authenticated
}

type Loan {
  id: String!
  amount: Int!
  totalInstallments: Int!
  incomeType: String!
  status: String!
  ownerName: String!
}

type User {
  id: String!
  name: String!
  role: Role!
}

