# GraphQL schema example
#
# https://gqlgen.com/getting-started/


scalar Map

scalar Upload

scalar Time

type Credential {
  accessToken: String!
}

directive @hasRole(role: Role!) on FIELD_DEFINITION

enum Role {
  ADMIN
  CREDIT_ASSISTANT
  MANAGER
  USER_CLIENT
}

enum IncomeType {
  OWN_BUSINESS
  ONW_EMPLOYEE
  PRIVATE_COMPANY_EMPLOYEE
  PUBLIC_EMPLOYEE
}

enum DocumentType {
  OWN_ASSET
  SIGNATURE_ACKNOWLEDGMENT
  TWO_GUARANTEES
  LAST_INVOICE
}

enum RequirementType {
  CLIENT_DOCUMENT_PHOTO
  LAST_INVOICE_PHOTO
  GUARANTEE_DOCUMENT_PHOTO
  OWN_ASSET_PHOTO
  GUARANTEE_NAME
  GUARANTEE_CI
  CO_BORROWER_NAME
  CO_BORROWER_CI
}

type Requirement {
  requirementType: RequirementType!
  title: String!
  description: String!
  status: Boolean!
}

directive @authenticated on | OBJECT | FIELD_DEFINITION | ENUM

enum OnboardingStatus {
  COMPLETE
  PENDING_PERSONAL_DATA
  PENDING_CI_FRONT
  PENDING_CI_BACK
  PENDING_PHONE_NUMBER
}


enum RoleAction {
  READ
  CREATE
  UPDATE
  DELETE
}

type Query  {
  getUser: User! @authenticated
  onboarding: OnboardingStatus! @authenticated
  getLoans: [Loan!]! @authenticated
  getLoanOrders: [Loan]! @authenticated
  getClients: [User]! @authenticated
  getStaff: [User]! @authenticated @hasRole(role: ADMIN)
  getLoan: Loan! @authenticated
  getLoanById(id: String!): Loan! @authenticated
  getLoanRequirements(loanId: String!, documentType: DocumentType!): [Requirement]! @authenticated
}

type Mutation {
  sendCodeByEmail(email: String!): Boolean!
  signInWithCode(email: String!, code: String!): Credential!
  login(email: String!, password: String!): Credential!
  toggleUserDisable(userXid: String!): Boolean! @authenticated @hasRole(role: ADMIN)
  createUser(email: String!, password: String!, name: String!, role: Role!): Boolean! @authenticated @hasRole(role: ADMIN)

  saveUserInfo(name: String!, identifier: String!): Boolean! @authenticated
  sendCodeByPhone(phone: String!): Boolean! @authenticated
  savePhoneNumber(phone: String!, code: String!): Boolean! @authenticated
  saveLoan(amount: Int!, totalInstallments: Int!, incomeType: IncomeType!): String! @authenticated
  logout: Boolean! @authenticated
  changeDocumentStatus(documentId: String!, status: DocumentStatus!): Boolean! @authenticated
}

type Loan {
  id: String!
  amount: Int!
  totalInstallments: Int!
  incomeType: String!
  status: String!
  ownerName: String!
  Timeline: Timeline!
  rateAmount: String!
  ratePercentage: String!
  installmentAmount: String!
  documents: [Document!]!
}

type Timeline {
  submitted: TimelineItem!
  requirements: TimelineItem!
  preApproved: TimelineItem!
  approved: TimelineItem!
  running: TimelineItem!
}

type TimelineItem {
  createdDate: Time!
  status: TimelineItemStatus!
}

enum TimelineItemStatus {
  DONE
  PENDING
}

type User {
  id: String!
  name: String!
  role: Role!
  email: String!
  phone: String!
  identifierNumber: String
}

enum DocumentStatus {
  PENDING_REVIEW
  APPROVED
  DECLINED
}

type Document {
  id: String!
  description: String!
  url: String!
  status: DocumentStatus!
  statusDescription: String!
}

