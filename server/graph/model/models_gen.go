// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type User struct {
	ID   *string `json:"id"`
	Name *string `json:"name"`
}

type OnboardingStatus string

const (
	OnboardingStatusComplete            OnboardingStatus = "COMPLETE"
	OnboardingStatusPendingPersonalData OnboardingStatus = "PENDING_PERSONAL_DATA"
	OnboardingStatusPendingCiFront      OnboardingStatus = "PENDING_CI_FRONT"
	OnboardingStatusPendingCiBack       OnboardingStatus = "PENDING_CI_BACK"
	OnboardingStatusPendingPhoneNumber  OnboardingStatus = "PENDING_PHONE_NUMBER"
)

var AllOnboardingStatus = []OnboardingStatus{
	OnboardingStatusComplete,
	OnboardingStatusPendingPersonalData,
	OnboardingStatusPendingCiFront,
	OnboardingStatusPendingCiBack,
	OnboardingStatusPendingPhoneNumber,
}

func (e OnboardingStatus) IsValid() bool {
	switch e {
	case OnboardingStatusComplete, OnboardingStatusPendingPersonalData, OnboardingStatusPendingCiFront, OnboardingStatusPendingCiBack, OnboardingStatusPendingPhoneNumber:
		return true
	}
	return false
}

func (e OnboardingStatus) String() string {
	return string(e)
}

func (e *OnboardingStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OnboardingStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OnboardingStatus", str)
	}
	return nil
}

func (e OnboardingStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
