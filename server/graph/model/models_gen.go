// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type IncomeType string

const (
	IncomeTypeOwnBusiness            IncomeType = "OWN_BUSINESS"
	IncomeTypeOnwEmployee            IncomeType = "ONW_EMPLOYEE"
	IncomeTypePrivateCompanyEmployee IncomeType = "PRIVATE_COMPANY_EMPLOYEE"
	IncomeTypePublicEmployee         IncomeType = "PUBLIC_EMPLOYEE"
)

var AllIncomeType = []IncomeType{
	IncomeTypeOwnBusiness,
	IncomeTypeOnwEmployee,
	IncomeTypePrivateCompanyEmployee,
	IncomeTypePublicEmployee,
}

func (e IncomeType) IsValid() bool {
	switch e {
	case IncomeTypeOwnBusiness, IncomeTypeOnwEmployee, IncomeTypePrivateCompanyEmployee, IncomeTypePublicEmployee:
		return true
	}
	return false
}

func (e IncomeType) String() string {
	return string(e)
}

func (e *IncomeType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = IncomeType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid IncomeType", str)
	}
	return nil
}

func (e IncomeType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OnboardingStatus string

const (
	OnboardingStatusComplete            OnboardingStatus = "COMPLETE"
	OnboardingStatusPendingPersonalData OnboardingStatus = "PENDING_PERSONAL_DATA"
	OnboardingStatusPendingCiFront      OnboardingStatus = "PENDING_CI_FRONT"
	OnboardingStatusPendingCiBack       OnboardingStatus = "PENDING_CI_BACK"
	OnboardingStatusPendingPhoneNumber  OnboardingStatus = "PENDING_PHONE_NUMBER"
)

var AllOnboardingStatus = []OnboardingStatus{
	OnboardingStatusComplete,
	OnboardingStatusPendingPersonalData,
	OnboardingStatusPendingCiFront,
	OnboardingStatusPendingCiBack,
	OnboardingStatusPendingPhoneNumber,
}

func (e OnboardingStatus) IsValid() bool {
	switch e {
	case OnboardingStatusComplete, OnboardingStatusPendingPersonalData, OnboardingStatusPendingCiFront, OnboardingStatusPendingCiBack, OnboardingStatusPendingPhoneNumber:
		return true
	}
	return false
}

func (e OnboardingStatus) String() string {
	return string(e)
}

func (e *OnboardingStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OnboardingStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OnboardingStatus", str)
	}
	return nil
}

func (e OnboardingStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleAdmin           Role = "ADMIN"
	RoleCreditAssistant Role = "CREDIT_ASSISTANT"
	RoleManager         Role = "MANAGER"
	RoleUserClient      Role = "USER_CLIENT"
)

var AllRole = []Role{
	RoleAdmin,
	RoleCreditAssistant,
	RoleManager,
	RoleUserClient,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleCreditAssistant, RoleManager, RoleUserClient:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RoleAction string

const (
	RoleActionRead   RoleAction = "READ"
	RoleActionCreate RoleAction = "CREATE"
	RoleActionUpdate RoleAction = "UPDATE"
	RoleActionDelete RoleAction = "DELETE"
)

var AllRoleAction = []RoleAction{
	RoleActionRead,
	RoleActionCreate,
	RoleActionUpdate,
	RoleActionDelete,
}

func (e RoleAction) IsValid() bool {
	switch e {
	case RoleActionRead, RoleActionCreate, RoleActionUpdate, RoleActionDelete:
		return true
	}
	return false
}

func (e RoleAction) String() string {
	return string(e)
}

func (e *RoleAction) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RoleAction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RoleAction", str)
	}
	return nil
}

func (e RoleAction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
